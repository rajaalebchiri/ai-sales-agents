// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WebinarStatusEnum {
  SCHEDULED
  WAITING_ROOM
  LIVE
  ENDED
  CANCELLED
}

enum CtaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum AttendedTypeEnum {
  REGISTERED
  ATTENDED
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  CONVERTED
}

model User {
  id String @id @default (dbgenerated("gen_random_uuid()")) @db.gen_random_uuid
  name String @db.VarChar(100)
  clerkId String @unique
  email String @unique
  profilImage String
  webinars Webinar[] relation("PresentWebinars")
  stripeConnectId String? @db.VarChar(255)
  lastLoginAt DateTime?
  ceratedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  subscription Boolean @default(false)
  stripeCustomerId String? @db.VarChar(255)

  @@index([email])
  @@index([clerkId])
}

model Webinar {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.gen_random_Uuid
  title String @db.VarChar(255)
  description String @db.Text
  startTime DateTime
  endTime DateTime
  duration Int
  webinarStatus WebinarStatusEnum @default(SCHEDULED)
  presenterId String @db.Uuid
  presenter User @relation(("PresenterWebinars", fields: [presenterId], references: [id], onDelete: Cascade))
  attendances Attendance[]
  tags String[]
  ctaLabel String? @db.VarChar(50)
  ctaType CtaTypeEnum
  ctaUrl String? @db.VarChar(255)
  couponCode String? @db.VarChar(50)
  couponEnabled Boolean @default(false)
  couponExpiry DateTime?
  lockChat Boolean @default(false)
  stripeProductId String? @db.VarChar(255)
  aiAgentId String? @db.Uuid
  priceId String? @db.VarChar(255)
  recordingUrl String?
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  Attendee Attendee? @relation(fields: [attendeeId], references: [id])
  attendeeId String? @db.Uuid

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
}

model Attendee {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.uuid
  email String @unique
  name String @db.VarChar(100)
  callStatus CallStatusEnum @default(PENDING)
  Attendance Attendance[]
  Webinar Webinar[]
}

model Attendance {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.uuid
  webinarId String @db.Uuid
  joinedAt DateTime @default()

}